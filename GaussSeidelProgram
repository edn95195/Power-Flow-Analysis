import numpy as np
import matplotlib.pyplot as plt

# over relaxation constant
alpha = 1.7

# Maximum number of iterations
max_iter = 150 # Maximum number of iterations

# Line Data: [Bus From, Bus To, Resistance, Reactance, Y/2]
linedata = np.array([
    [1, 2, 0.0474, 0.0, 0.00],
    [1, 3, 0.0632, 0.0, 0.00],
    [2, 3, 0.0474, 0.0, 0.00]
])

# Bus Data: [Bus Number, Bus Type, Active Power Gen, Reactive Power Gen, Active Power Demand, Reactive Power Demand, Voltage Mag, Voltage Angle, Min Reac Power, Max React Power]
busdata = np.array([
    [1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    [2, 2, 2.0, 0, 0, 0, 1.05, 0, -1e15, 1e15],
    [3, 3, 0, 0, -5.0, -1, 1, 0, 0, 0]
])



# Base power and base voltage
base_MVA = 100 # Converted base power to MVA
base_kv = 345 # Converted base voltage to kV

# Y Bus Formation
R = linedata[:, 2]
X = linedata[:, 3]
B = 1j * linedata[:, 4]
Z = R + 1j * X
Y = 1 / Z
nline = len(linedata)
nbus = int(max(linedata[:, 0].max(), linedata[:, 1].max()))

Ybus = np.zeros((nbus, nbus), dtype=complex)
for k in range(nline):
    Ybus[int(linedata[k, 0]) - 1, int(linedata[k, 1]) - 1] -= Y[k]
    Ybus[int(linedata[k, 1]) - 1, int(linedata[k, 0]) - 1] = Ybus[int(linedata[k, 0]) - 1, int(linedata[k, 1]) - 1]
    Ybus[int(linedata[k, 0]) - 1, int(linedata[k, 0]) - 1] += Y[k] + B[k]
    Ybus[int(linedata[k, 1]) - 1, int(linedata[k, 1]) - 1] += Y[k] + B[k]

# Bus Data Collection
type_bus = busdata[:, 1].astype(int)
Pg = busdata[:, 2]
Qg = busdata[:, 3]
Pd = busdata[:, 4]
Qd = busdata[:, 5]
Qmin = busdata[:, 8]
Qmax = busdata[:, 9]
Vmag = busdata[:, 6]
delta = busdata[:, 7]

#Initial Parameters Calculation
V = Vmag * (np.cos(delta) + 1j * np.sin(delta))
P = Pg - Pd
Q = Qg - Qd

# Iteration

voltage_mag_history = np.zeros((nbus, max_iter))
voltage_angle_history = np.zeros((nbus, max_iter))
accuracy = 0.001
iter = 0
DV = np.zeros(nbus, dtype=complex)

while accuracy >= 1e-4 and iter < max_iter:
    for n in range(nbus):
        if type_bus[n] == 2:  # PV Bus
            # Calculating Q
            Q[n] = -np.imag(np.conj(V[n]) * np.dot(Ybus[n, :], V))
            # Q limit check
            if Qmin[n] <= Q[n] <= Qmax[n]:
                A = np.dot(Ybus[n, :], V) - Ybus[n, n] * V[n]
                Vnew = (P[n] - 1j * Q[n]) / np.conj(V[n]) / Ybus[n, n] - A / Ybus[n, n]
                Vnew_corr = Vmag[n] * Vnew / abs(Vnew)
                DV[n] = Vnew_corr - V[n]
                V[n] = Vnew_corr
            else:
                # Adjust Q within limits
                Q[n] = np.clip(Q[n], Qmin[n], Qmax[n])
                A = np.dot(Ybus[n, :], V) - Ybus[n, n] * V[n]
                Vnew = (P[n] - 1j * Q[n]) / np.conj(V[n]) / Ybus[n, n] - A
                Vnew_acc = V[n] + alpha * (Vnew - V[n])
                DV[n] = Vnew_acc - V[n]
                V[n] = Vnew_acc
        elif type_bus[n] == 3:  # PQ Bus
            A = np.dot(Ybus[n, :], V) - Ybus[n, n] * V[n]
            Vnew = (P[n] - 1j * Q[n]) / np.conj(V[n]) / Ybus[n, n] - A
            Vnew_acc = V[n] + alpha * (Vnew - V[n])
            DV[n] = Vnew_acc - V[n]
            V[n] = Vnew_acc

    for i in range(nbus):
        voltage_mag_history[i, iter] = np.abs(V[i])
        voltage_angle_history[i, iter] = np.angle(V[i], deg=True)

    accuracy = np.linalg.norm(DV)
    iter += 1

# Plotting Results after completing all iterations
time = np.arange(iter)
for i in range(nbus):
    plt.figure(figsize=(12, 6))

    plt.subplot(1, 2, 1)
    plt.plot(time, voltage_mag_history[i, :iter], label=f'Bus {i+1}')
    plt.title(f'Voltage Magnitude for Bus {i+1}')
    plt.xlabel('Iteration')
    plt.ylabel('Voltage Magnitude (pu)')
    plt.grid(True)
    plt.legend()

    plt.subplot(1, 2, 2)
    plt.plot(time, voltage_angle_history[i, :iter], label=f'Bus {i+1}')
    plt.title(f'Voltage Angle for Bus {i+1}')
    plt.xlabel('Iteration')
    plt.ylabel('Voltage Angle (Degrees)')
    plt.grid(True)
    plt.legend()

    plt.tight_layout()
    # Save the plot with a unique filename
    plt.savefig(f'Bus_{i+1}_Voltage_Plot.png')
    
    plt.show()

print("Load Flow Analysis Results:")
print("Number of Iterations:", iter)
print("Final Bus Voltages (Per Unit and Actual):")
for i in range(nbus):
    mag_pu = np.abs(V[i])
    angle_deg = np.angle(V[i], deg=True)  # Angle in degrees
    mag_actual = mag_pu * base_kv  # Converting to actual voltage
    print(f"Bus {i+1}: Voltage = {mag_pu:.4f} pu | {mag_actual:.2f} kV | Angle = {angle_deg:.2f} degrees")
